:ogp_title: 楽々入門！VS Codeで『リファクタリング』
:ogp_event_name: vscodeconjp
:ogp_slide_name: introduction-easy-refactoring
:ogp_description: 2023/01 VS Code Conference Japan 2022 - 2023 15分トークスライド（ドラフト版）
:ogp_image_name: vscodeconjp-refactoring

============================================================
楽々入門！VS Codeで『リファクタリング』
============================================================

:Event: VS Code Conference Japan 2022 - 2023
:Presented: 2023/01/21 nikkie 14:20-

お前、誰よ（※自己紹介）
============================================================

* にっきーって言います。VS Code使ってます
* :fab:`twitter` `@ftnext <https://twitter.com/ftnext>`__ ／ :fab:`github` `@ftnext <https://github.com/ftnext>`__ ／ `はてなブログ <https://nikkie-ftnext.hatenablog.com/>`_
* **Python** 大好き。コードは **構造** にもこだわりたい
* 株式会社ユーザベースでデータサイエンティスト（自然言語処理、XP）

.. _リファクタリング: https://www.ohmsha.co.jp/book/9784274224546/

.. include:: refactoring/talk-introduction.rst.txt

楽々入門！VS Codeで『リファクタリング』
--------------------------------------------------

1. トークの認識合わせ✅
2. 主張：リファクタリングテクニックをエディタと結び付けよう
3. カタログ：VS Codeでリファクタリング（別目次）

Part 2. リファクタリングテクニックをエディタと結び付けよう
============================================================

1. トークの認識合わせ
2. **主張：リファクタリングテクニックをエディタと結び付けよう**
3. カタログ：VS Codeでリファクタリング（別目次）

.. include:: refactoring/resident-refactoring.rst.txt

Part 3. カタログ：VS Codeでリファクタリング
============================================================

1. トークの認識合わせ
2. 主張：リファクタリングテクニックをエディタと結び付けよう
3. **カタログ：VS Codeでリファクタリング（別目次）**

.. include:: refactoring/techniques-and-operations.rst.txt

落穂ひろい🌾：リファクタリングとテストコード
============================================================

**テストコード** で、ますます捗るリファクタリング
--------------------------------------------------

* 振る舞いを変えずに構造を変えるのがリファクタリング
* テストコードがあると、 **振る舞いを変えてしまったことに気付ける**

テストは **不安を退屈に変える** 賢者の石
--------------------------------------------------

* 『`テスト駆動開発 <https://www.ohmsha.co.jp/book/9784274217883/>`_』第25章の言葉
* 「リファクタリングで振る舞いを変えているんじゃないか」という不安がなくなった
* 都度手動テストでも確認できるが、何度も繰り返すため、 **テストコードが一番効果的** と考えます

今回紹介したVS Codeのリファクタリング操作について（IMO）
-----------------------------------------------------------

* VS Codeは信頼している。デモのような **小さい範囲** はガンガンリファクタリング
* ですが、テストコードがないとき、広い範囲に関わるならば私は見送ります

  * **まずテストコード** を用意しよう（武器『`レガシーコード改善ガイド <https://www.shoeisha.co.jp/book/detail/9784798116839>`_』）

今回紹介したリファクタリングテクニックはごく一部
--------------------------------------------------

* 📘『`リファクタリング`_』にはまだまだテクニックが載っている
* VS Codeがサポートしないテクニックは、テストコードを書いて、リファクタリング手順を練習して常駐させていきましょう！

まとめ🌯：楽々入門！VS Codeで『リファクタリング』
============================================================

* Martin Fowler著『リファクタリング』のテクニックをVS Codeの操作と結び付けて紹介
* 使い所（理論）とエディタの操作（身体）で覚えている **常駐** 状態の提案

紹介したテクニックとVS Codeの操作
--------------------------------------------------

* 変数名・関数名の変更➡️ :kbd:`F2` (Rename Symbol)
* 変数の抽出➡️ :guilabel:`Extract variable`
* 関数の抽出➡️ :guilabel:`Extract method`
* 特性の移動に関する数テクニック➡️ :kbd:`⌥↑` :kbd:`⌥↓` で始めよう

ご清聴ありがとうございました！
--------------------------------------------------

Enjoy development!

.. include:: refactoring/references.rst.txt

.. include:: refactoring/appendix.rst.txt

EOF
===
