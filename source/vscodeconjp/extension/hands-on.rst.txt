Part 1. テキストをベースに写経 & 改造
============================================================

.. TODO 目次ハイライト

.. _VSCode Conference Japan 2021: https://vscodejp.github.io/conf2021/ja/
.. _vscodejp/handson-hello-vscode-extension: https://github.com/vscodejp/handson-hello-vscode-extension

知っていたテキスト
--------------------------------------------------

* `VSCode Conference Japan 2021`_ (2021/11) ハンズオン
* VS Codeの拡張機能を作ろう❗ :fab:`github` `vscodejp/handson-hello-vscode-extension`_
* LSP（Language Server Protocol）を使った拡張を作る

拡張機能の基礎を学びたい人（beginner）向け
--------------------------------------------------

* Hello World（簡単な拡張を作って起動する）
* コードレンズのボタンからドキュメントを編集する拡張を作る

経験のない試みなので、ハードルを下げた（これでもできるか分からなかった）

時を戻そう（当時のnikkieに助言するなら）
--------------------------------------------------

* beginner向けテキストを改造する（変更なし）
* 拡張開発までカバーした書籍（参考文献参照）に当たって **日本語で多くの情報を得る** のがより早道

テキストをベースに写経 & 改造
--------------------------------------------------

1. beginner向けテキストに沿ってHello Worldを動かす
2. beginner向けテキストに沿ってドキュメントを編集する拡張を動かす
3. ドキュメントの編集を自分がやりたい編集の仕方に改造する

.. ref: https://scrapbox.io/nikkie-memos/%E6%8B%A1%E5%BC%B5%E6%A9%9F%E8%83%BD%E3%81%AE%E5%9F%BA%E7%A4%8E%E3%82%92%E5%AD%A6%E3%81%B3%E3%81%9F%E3%81%84%E4%BA%BA%E5%90%91%E3%81%91

1-1 Hello World
============================================================

.. TODO 目次ハイライト

.. _事前準備 必要な開発環境を整えよう: https://github.com/vscodejp/handson-hello-vscode-extension/blob/main/docs/00_prepare.md

開発環境構築
============================================================

* **開発環境構築**

  * ツールのセットアップ
  * scaffold（拡張開発に必要なファイル一式の生成）

* 開発中の拡張を動かす

VS Code
--------------------------------------------------

* 拡張開発中のバグ混入を防ぐため、VS Codeに `ESLint拡張機能 <https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint>`__ をインストール
* （普段遣いなので、nikkieの場合、VS Code自体のインストールは不要でした）

`事前準備 必要な開発環境を整えよう`_

Node.js
--------------------------------------------------

    `Node.jsのページ <https://nodejs.org/>`__ からLTS（Long Term Support）バージョンをインストールしましょう。

`事前準備 必要な開発環境を整えよう`_ では16.13.0

.. _Yeoman: https://yeoman.io/

:command:`npm install`
--------------------------------------------------

.. TODO 見やすくしたい

* ``yo`` （`Yeoman`_。scaffold＝足場（テンプレートに沿ったファイル群）を作ってくれるツール）
* ``generator-code`` （YeomanのVS Code拡張向けテンプレート）

ref: `事前準備 必要な開発環境を整えよう`_

.. _Hello Worldを作成しよう: https://github.com/vscodejp/handson-hello-vscode-extension/blob/main/docs/beginner/01_init.md

:command:`yo code` でscaffoldするんだYO
--------------------------------------------------

TODO ディレクトリツリー（samplecode下に用意する）

`Hello Worldを作成しよう`_

開発中の拡張を動かす
============================================================

* 開発環境構築
* 開発中の拡張を動かす

Hello World拡張がscaffoldされている
--------------------------------------------------

* :command:`yo code` しただけ。 **実装は不要**
* :kbd:`F5` で拡張をビルド（新しいVS CodeのWindow）

.. _Hello Worldを起動しよう: https://github.com/vscodejp/handson-hello-vscode-extension/blob/main/docs/beginner/02_build.md

Hello World!
--------------------------------------------------

* コマンドパレット（:kbd:`F1`）を開いて
* 「Hello World」コマンドを呼び出す

.. TODO コマンド実行結果のスクリーンショット

`Hello Worldを起動しよう`_

:file:`src/extension.ts`
--------------------------------------------------

.. TODO 続く説明の伏線として全体+ハイライトの方がわかりやすそう

.. code-block:: ts

    window.showInformationMessage('Hello World from Hello VSCode!');

* ``showInformationMessage`` でVS CodeのWindow右下にメッセージが出た

`Hello Worldを起動しよう`_

メッセージの内容を変えてみる
--------------------------------------------------

* ソースを編集したら :kbd:`Shitt + Command + F5` でRestart
* コマンドパレットから「Hello World」コマンドを呼び出すと、メッセージが変わっている！
* 「拡張開発できている！！」🙌

Hello Worldではユーザが呼び出せる *コマンド* を追加した
------------------------------------------------------------

* :file:`package.json` 中（``contributes``）に ``hello-vscode.helloWorld`` という識別子のコマンドを宣言
* :file:`src/extension.ts` では ``commands.registerCommand`` で ``hello-vscode.helloWorld`` コマンドを利用可能にした
* 追加されたコマンドをコマンドパレットから呼び出した

.. TODO コントリビューションポイントを説明する？
.. TODO コマンドパレット、すべてはコマンド

🥟Hello World 小まとめ
============================================================

* `事前準備 必要な開発環境を整えよう`_ に沿って環境構築
* Yeomanでscaffold（拡張開発に必要なファイル一式を作成）
* Hello World拡張を動かせている！

1-2 マークダウンを編集する拡張
============================================================

.. TODO 目次ハイライト

.. _ドキュメントを編集しよう: https://github.com/vscodejp/handson-hello-vscode-extension/blob/main/docs/beginner/04_edit.md

やりたいことは、日付の挿入
============================================================

* マークダウンファイル
* **見出しに日付を挿入** したい

.. code-block:: markdown
    :caption: before

    ## VSCodeConJP

.. code-block:: markdown
    :caption: after

    ## 2023/01/21 VSCodeConJP

日付挿入ロジック
--------------------------------------------------

* 1つ以上の ``#`` を「同じ数の ``#`` とその日の日付」で **置き換え** る
* ``## VSCodeConJP`` であれば、 ``##(空白)`` を ``## 2023/01/21(空白)`` で置き換え（いずれも末尾に空白文字 **含む**）

.. code-block:: diff

    - ## VSCodeConJP
    + ## 2023/01/21 VSCodeConJP

ハンズオンにおける実装：CodeLens（コードレンズ）
--------------------------------------------------

`CodeLens - Show Actionable Context Information Within Source Code <https://code.visualstudio.com/api/language-extensions/programmatic-language-features#codelens-show-actionable-context-information-within-source-code>`_

*ソースコード中に表示される、ユーザがアクションできるリンク*

CodeLensを使った拡張の例：GitLens
--------------------------------------------------

TODO

CodeLensを使った日付挿入
--------------------------------------------------

* 1行目が見出しの行（``#`` で始まる行）であればCodeLensを作る

  * 1行目が ``## VSCodeConJP`` であれば ``##(空白)`` にCodeLensを作る（add dateというリンク）

* ユーザがCodeLensをクリックすると ``##(空白)`` を ``## 2023/01/21(空白)`` に置き換え（日付挿入）

.. 1行目以外はCodeLensが作られない実装

TODO 視覚的にわかりやすく表示するスクリーンショットなど

CodeLensを使った日付挿入を実現する要素
============================================================

* CodeLens
* コマンド

  * ユーザがCodeLensのリンクをクリックしたら、コマンドが呼び出され、日付挿入される

``vscode.CodeLensProvider``
--------------------------------------------------

* 実装して独自の ``CodeLensProvider`` クラスを定義する
* ソースコード（今回はマークダウンファイル）中にCodeLensを設定する

``CodeLensProvider`` が設定するCodeLens1つ1つ
--------------------------------------------------

* 「何行目の何文字目から何文字目まで」（range）にCodeLensを作成する
* rangeを出すのに正規表現を使う

  * マークダウンファイルの中身について ``/^#+\s/g;`` と一致する箇所（range）すべてにCodeLensを作成

.. 正規表現が^から始まるので、マークダウンファイル1つに1個あるかないか

コマンドを呼び出すようにCodeLensを作成
--------------------------------------------------

.. code-block:: ts

        codeLenses.push(
          new vscode.CodeLens(range, {
            title: "add date",
            tooltip: "add date",
            command: "markdown-date.addDate",
            arguments: [range],
          })
        );

.. return codeLenses があると分かりやすそう

``markdown-date.addDate`` コマンド
--------------------------------------------------

.. code-block:: ts

    commands.registerCommand("markdown-date.addDate", (range: Range) => {
      if (vscode.window.activeTextEditor) {
        // ## VSCodeConJP の場合、textが「## 」
        const text = vscode.window.activeTextEditor.document.getText(range);

        const today = dayjs().format("YYYY-MM-DD");

        vscode.window.activeTextEditor.edit((editBuilder) => {
          // ## VSCodeConJP の場合、「## 」を表すrangeを「## 2023/01/21 」で置き換える
          editBuilder.replace(range, text + today + " ");
        });
      }
    });

.. TODO マークダウンだけというmanifestの宣言

🥟マークダウンを編集する拡張 小まとめ
============================================================

* 1行目の見出しに日付を挿入できるようにしたい
* CodeLensと、CodeLensクリックでコマンド呼び出し
* ``vscode.CodeLensProvider`` を実装（正規表現にマッチしたrangeに ``CodeLens`` を作る）

1-3 マークダウン編集ロジックを改造
============================================================

実は無限に日付を挿入できる
--------------------------------------------------

* ``## VSCodeConJP``
* ``## 2023/01/21 VSCodeConJP``

  * ``##(空白)`` の部分にCodeLensが作成される

* ``## 2023/01/21 2023/01/21 VSCodeConJP``

改造案を着想
--------------------------------------------------

* 見出しに限らず、特定の文字列の後ろにemojiを挿入できるのでは！？
* 文字列「歩夢」の後ろに「🎀」を挿入（「歩夢」を「歩夢🎀」で置換）
* 歩夢 ➡️ 歩夢🎀 ➡️ 歩夢🎀🎀 ➡️ 歩夢🎀🎀🎀

これを実装し、公開したのが
--------------------------------------------------

https://marketplace.visualstudio.com/items?itemName=everlasting-diary.tokimeki-editing

公開までの手順は続くパートで

🌯Part 1. テキストをベースに写経 & 改造 まとめ
============================================================

* :fab:`github` `vscodejp/handson-hello-vscode-extension`_ をベースにマークダウンを編集する拡張を写経・改造できる
* VS Codeの概念：「コマンド」「CodeLens」

  * CodeLensからコマンドを呼び出し、**CodeLensが設定されている範囲を編集** できる

関連アウトプット 🏃‍♂️
--------------------------------------------------

* `VSCode拡張開発 素振りの記：ハンズオンテキストを元に「歩夢」を「歩夢🎀」に置き換える拡張を自作し、コマンドとコードレンズを完全に理解 <https://nikkie-ftnext.hatenablog.com/entry/vscode-extension-development-101-command-codelens>`__
