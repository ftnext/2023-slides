Part 1. テキストを写経 & 改造しよう
============================================================

1. **テキストをベースに写経 & 改造** （メインパート）
2. 拡張のE2Eテストを書く
3. 拡張を公開

.. _VSCode Conference Japan 2021: https://vscodejp.github.io/conf2021/ja/
.. _vscodejp/handson-hello-vscode-extension: https://github.com/vscodejp/handson-hello-vscode-extension

知っていたテキスト
--------------------------------------------------

* `VSCode Conference Japan 2021`_ (2021/11) ハンズオン
* VS Codeの拡張機能を作ろう❗ :fab:`github` `vscodejp/handson-hello-vscode-extension`_
* LSP（Language Server Protocol）を使った拡張を作る

拡張機能の基礎を学びたい人（**beginner**）向け
--------------------------------------------------

* Hello World（**簡単な拡張** を作って起動する）
* *コードレンズ* のボタンから **ドキュメントを編集** する拡張を作る

経験のない試みなので、ハードルを下げた（これでもできるか分からなかった）

時を戻そう（当時のnikkieに助言するなら）
--------------------------------------------------

* **beginner向けテキスト** を改造する（変更なし）
* 英語のドキュメントにあたったが、拡張開発までカバーした書籍（参考文献参照）より早道（**日本語で多くの情報を得る**）

テキストを写経 & 改造
--------------------------------------------------

1. 写経：Hello Worldを動かす
2. 写経：ドキュメントを編集する拡張を動かす
3. ドキュメントの編集を自分がやりたい編集の仕方に改造する

.. ref: https://scrapbox.io/nikkie-memos/%E6%8B%A1%E5%BC%B5%E6%A9%9F%E8%83%BD%E3%81%AE%E5%9F%BA%E7%A4%8E%E3%82%92%E5%AD%A6%E3%81%B3%E3%81%9F%E3%81%84%E4%BA%BA%E5%90%91%E3%81%91

1-1 Hello World
============================================================

1. **写経：Hello Worldを動かす**
2. 写経：ドキュメントを編集する拡張を動かす
3. ドキュメントの編集を自分がやりたい編集の仕方に改造する

.. _事前準備 必要な開発環境を整えよう: https://github.com/vscodejp/handson-hello-vscode-extension/blob/main/docs/00_prepare.md

Hello Worldを動かす
============================================================

* **開発環境構築**

  * ツールのセットアップ
  * scaffold（拡張開発に必要なファイル一式の生成）

* 開発中の拡張を動かす

インストールしたもの
--------------------------------------------------

* `Node.js <https://nodejs.org/>`_ のLTSバージョン

  * ハンズオンテキストでは16.13.0

* VS Codeに `ESLint拡張機能 <https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint>`__

  * 拡張開発中のバグ混入を防ぐ

`事前準備 必要な開発環境を整えよう`_

.. _Yeoman: https://yeoman.io/

:command:`npm install yo generator-code`
--------------------------------------------------

:yo: `Yeoman`_ scaffold＝足場（テンプレートに沿ったファイル群）を作ってくれるツール
:generator-code: YeomanのVS Code拡張向けテンプレート

ref: `事前準備 必要な開発環境を整えよう`_

.. _Hello Worldを作成しよう: https://github.com/vscodejp/handson-hello-vscode-extension/blob/main/docs/beginner/01_init.md

:command:`yo code` でscaffoldするんだYO
--------------------------------------------------

:fab:`github` `hello-vscode <https://github.com/ftnext/2023-slides/tree/main/samplecode/awakening-extension/hello-vscode>`__

.. https://tree.nathanfriend.io/
  hello-vscode
   .vscode/
   src/
    extension.ts
   package.json
   package-lock.json

.. code-block:: none

    hello-vscode/
    ├── .vscode/
    ├── src/
    │   └── extension.ts
    ├── package.json
    └── package-lock.json

上記は抜粋版。 `Hello Worldを作成しよう`_ に詳細な説明あります

Hello Worldを動かす
============================================================

* 開発環境構築✅
* **開発中の拡張を動かす**

Hello World拡張がscaffoldされている
--------------------------------------------------

* :command:`yo code` しただけ。 **実装は不要**
* VS Codeで :kbd:`F5` で拡張をビルド（新しいVS CodeのWindow）

.. _Hello Worldを起動しよう: https://github.com/vscodejp/handson-hello-vscode-extension/blob/main/docs/beginner/02_build.md

Hello World!（デモ）
--------------------------------------------------

* *コマンド* パレット（:kbd:`F1`）を開いて
* 「Hello World」コマンドを呼び出す

`Hello Worldを起動しよう`_

コマンド実行結果、右下から来るぞ！
--------------------------------------------------

.. figure:: ../_static/vscodeconjp/01extension-hello-world.png

:file:`src/extension.ts`
--------------------------------------------------

.. literalinclude:: ../../samplecode/awakening-extension/hello-vscode/src/extension.ts
    :language: ts
    :lines: 3,7,16,19-20,26
    :emphasize-lines: 4

* ``showInformationMessage`` でVS CodeのWindow右下にメッセージが出た

`Hello Worldを起動しよう`_

メッセージの内容を変えてみる
--------------------------------------------------

* **ソースを編集** したら :kbd:`Shift + Command + F5` でRestart
* コマンドパレットから「Hello World」コマンドを呼び出すと、メッセージが変わっている！
* 「拡張開発できている！！」🙌

Hello Worldではユーザが呼び出せる *コマンド* を追加した
------------------------------------------------------------

* :file:`package.json`
* :file:`src/extension.ts`

ユーザが使えるコマンドの秘密は、この2つのファイル

:file:`package.json` にコマンドのID 🏃‍♂️== **skip**
------------------------------------------------------------

``hello-vscode.helloWorld`` という識別子のコマンドを宣言

.. literalinclude:: ../../samplecode/awakening-extension/hello-vscode/package.json
    :language: json
    :lines: 16-23

:file:`src/extension.ts` にコマンドの実装 🏃‍♂️
--------------------------------------------------

``commands.registerCommand`` で ``hello-vscode.helloWorld`` コマンドを実装と紐付けた

.. literalinclude:: ../../samplecode/awakening-extension/hello-vscode/src/extension.ts
    :language: ts
    :lines: 3,7,16,19-20,26
    :emphasize-lines: 3-5

🥟Hello World 小まとめ
============================================================

* `事前準備 必要な開発環境を整えよう`_ に沿って環境構築
* Yeomanでscaffold（拡張開発に必要なファイル一式を作成）
* Hello World拡張を動かせている！

1-2 マークダウンを編集する拡張
============================================================

1. 写経：Hello Worldを動かす
2. **写経：ドキュメントを編集する拡張を動かす**
3. ドキュメントの編集を自分がやりたい編集の仕方に改造する

.. _ドキュメントを編集しよう: https://github.com/vscodejp/handson-hello-vscode-extension/blob/main/docs/beginner/04_edit.md

やりたいことは、日付の挿入
============================================================

* マークダウンファイル
* **見出しに日付を挿入** したい

.. code-block:: markdown
    :caption: before

    ## VSCodeConJP

.. code-block:: markdown
    :caption: after

    ## 2023/01/21 VSCodeConJP

日付挿入ロジック
--------------------------------------------------

* 1つ以上の ``#`` を「同じ数の ``#`` とその日の日付」で **置き換え** る
* 例 ``## VSCodeConJP``

  * ``##(空白)`` ➡️ ``## 2023/01/21(空白)``

.. code-block:: diff

    - ## VSCodeConJP
    + ## 2023/01/21 VSCodeConJP

ハンズオンにおける実装：CodeLens（コードレンズ）
--------------------------------------------------

`CodeLens - Show Actionable Context Information Within Source Code <https://code.visualstudio.com/api/language-extensions/programmatic-language-features#codelens-show-actionable-context-information-within-source-code>`_

*ソースコード中に表示される、ユーザがアクションできるリンク*

CodeLensを使った日付挿入（デモ）
--------------------------------------------------

.. figure:: ../_static/vscodeconjp/01extension-add-date-codelens-example.png

CodeLensを使った日付挿入 🏃‍♂️
--------------------------------------------------

* :guilabel:`add date` がCodeLens。ユーザはクリックできる
* **クリックすると日付挿入**： ``##(空白)`` を ``## 2023/01/21(空白)`` に置き換え

CodeLensを使った日付挿入を実現する要素
============================================================

* CodeLens
* コマンド

  * ユーザがCodeLensをクリックしたら、**コマンドが呼び出され**、日付挿入される

ファイルにCodeLensを用意するには
--------------------------------------------------

* 今回はマークダウンファイル中にCodeLensを設定する
* ``vscode.CodeLensProvider``

  * 実装して独自の ``CodeLensProvider`` クラスを定義

``CodeLensProvider`` で複数のCodeLensを作る
--------------------------------------------------

* CodeLens1つ1つは「何行目の何文字目から何文字目まで」（**range**）に作られる
* rangeを求めるのに正規表現を使う（後述）

マークダウンの見出しの行を **正規表現** で見つける
--------------------------------------------------

* ``/^#+\s/g`` と一致するrange（すべて）にCodeLensを作成
* 例：1行目が ``## VSCodeConJP``

  * ``##(空白)`` にCodeLensを作る（:guilabel:`add date` というリンク）

.. 正規表現が^から始まるので、マークダウンファイル1つに1個あるかないか
.. 1行目以外はCodeLensが作られない実装

コマンドを呼び出すようにCodeLensを作成
--------------------------------------------------

.. literalinclude:: ../../samplecode/awakening-extension/markdown-date/src/extension.ts
  :language: ts
  :start-after: [コマンドを呼び出すようにCodeLensを作成]
  :end-before: [コマンドを呼び出すようにCodeLensを作成]
  :caption: ``provideCodeLenses`` メソッド（``CodeLensProvider`` クラス）

.. code-block:: ts

    return codeLenses;

``markdown-date.addDate`` コマンド
--------------------------------------------------

.. code-block:: ts

    commands.registerCommand("markdown-date.addDate", (range: Range) => {
      if (vscode.window.activeTextEditor) {
        // ## VSCodeConJP の場合、textが「## 」
        const text = vscode.window.activeTextEditor.document.getText(range);

        const today = dayjs().format("YYYY-MM-DD");

        vscode.window.activeTextEditor.edit((editBuilder) => {
          // ## VSCodeConJP の場合、「## 」を表すrangeを「## 2023/01/21 」で置き換える
          editBuilder.replace(range, text + today + " ");
        });
      }
    });

この拡張が機能するのはマークダウンだけに設定 🏃‍♂️
--------------------------------------------------

    1. Markdown を開いたときに拡張機能が起動するようにする
    2. 拡張機能が起動したときに CodeLensProvider を起動する

`ドキュメントを編集しよう`_

Markdown を開いたときに拡張機能が起動 🏃‍♂️
--------------------------------------------------

    拡張機能が起動するタイミングを、対象の言語 ID のファイルを開いたときにまで遅らせる

.. literalinclude:: ../../samplecode/awakening-extension/markdown-date/package.json
    :language: json
    :lines: 12-14

拡張機能が起動したときに CodeLensProvider を起動 🏃‍♂️
------------------------------------------------------------

.. code-block:: ts
    :emphasize-lines: 4-7

    export function activate(context: ExtensionContext) {
      const codelensProvider = new CodelensProvider();

      let disposable = languages.registerCodeLensProvider(
        { language: "markdown" },
        codelensProvider
      );
      disposables.push(disposable);
    }

🥟マークダウンを編集する拡張 小まとめ
============================================================

* 1行目の見出しに日付を挿入できるようにしたい
* CodeLensと、CodeLensクリックでコマンド呼び出し
* ``vscode.CodeLensProvider`` を実装（正規表現にマッチしたrangeに ``CodeLens`` を作る）

テキストの実装をもっと詳しく知りたい方向け 🏃‍♂️
--------------------------------------------------

* `VS Code拡張ハンズオン基礎編のテキストの中の、正規表現を使ってCodeLensを設定する実装を理解する <https://nikkie-ftnext.hatenablog.com/entry/vscode-extension-create-codelens-with-regex>`__
* `VS Code拡張ハンズオン基礎編のテキストの中の、VSCode APIを駆使してドキュメントに対してCodeLensを作成する実装を理解する <https://nikkie-ftnext.hatenablog.com/entry/vscode-extension-provide-codelens-with-vscode-api>`__

IMO：VS Codeの操作、内部的にはすべてはコマンド 🏃‍♂️
------------------------------------------------------------

* Hello Worldコマンド（ユーザが **コマンドパレット** から呼び出せる）
* CodeLensでマークダウン編集（**コマンド** を呼び出して編集を実現）

1-3 マークダウン編集ロジックを改造
============================================================

1. 写経：Hello Worldを動かす
2. 写経：ドキュメントを編集する拡張を動かす
3. **ドキュメントの編集を自分がやりたい編集の仕方に改造する**

実は **無限** に日付を挿入できる
--------------------------------------------------

* ``## VSCodeConJP``
* ``## 2023/01/21 VSCodeConJP``

  * ``##(空白)`` の部分にCodeLensが作成される

* ``## 2023/01/21 2023/01/21 VSCodeConJP``

改造案を着想
--------------------------------------------------

* 見出しに限らず、特定の文字列の後ろにemojiを挿入できるのでは！？
* 文字列「歩夢」の後ろに「🎀」を挿入（「歩夢」を「歩夢🎀」で置換）
* 歩夢 ➡️ 歩夢🎀 ➡️ 歩夢🎀🎀 ➡️ 歩夢🎀🎀🎀 🤩

これを実装し、公開したのが
--------------------------------------------------

`TOKIMEKI Editing🌈 <https://marketplace.visualstudio.com/items?itemName=everlasting-diary.tokimeki-editing>`__

公開までの手順は続くパートで

🌯Part 1. テキストを写経 & 改造しよう まとめ
============================================================

* :fab:`github` `vscodejp/handson-hello-vscode-extension`_ beginner向けをベースに、マークダウンを編集する拡張を写経・改造
* VS Codeの概念：「コマンド」「CodeLens」

  * CodeLensからコマンドを呼び出し、**CodeLensが設定されている範囲を編集** できる

関連アウトプット 🏃‍♂️
--------------------------------------------------

* `VSCode拡張開発 素振りの記：ハンズオンテキストを元に「歩夢」を「歩夢🎀」に置き換える拡張を自作し、コマンドとコードレンズを完全に理解 <https://nikkie-ftnext.hatenablog.com/entry/vscode-extension-development-101-command-codelens>`__
