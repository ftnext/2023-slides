Part 3. カタログ：VS Codeでリファクタリング
============================================================

* 変数名の変更
* 関数名の変更
* **変数の抽出**
* 関数の抽出
* 特性の移動に関する数テクニック

すなわち、 **式に名前を付ける**
--------------------------------------------------

* 初版では「説明用変数の導入」と呼ばれていた
* Webカタログ：https://refactoring.com/catalog/extractVariable.html

「変数の抽出」の使い所
--------------------------------------------------

* 式を説明するコメントを見つけた・書きたいとき
* 「*コメントを書かなくとも内容がわかるようなコードを目指す*」（📘『`リファクタリング`_』第3章）

VS Codeを操作して変数を抽出
============================================================

* 式を選択
* **Extract variable**

Extract variable
--------------------------------------------------

* Pythonの場合はPython拡張が提供
* https://code.visualstudio.com/docs/python/editing#_extract-variable
* VS Codeによって ``new_var`` が抽出されるので、renameする

Extract variableによる「変数の抽出」のデモ
--------------------------------------------------

.. literalinclude:: ../../samplecode/vscode-easy-refactoring/extract_variable.py
    :language: python
    :linenos:
    :start-after: [extract variable]
    :end-before: [extract variable]

「変数の抽出」を繰り返すと、この例のコメントは不要になります

エディタでExtract variableするメリット
--------------------------------------------------

* 📘『リファクタリング』はエディタのサポートを受けない手順
* 式をコピーして変数を導入 ➡ 式を変数で置き換え
* IMO：エディタの機能を使うことで **楽** ができる（常駐しやすい）

変数の抽出
============================================================

:どんなときに使うのか: 式を説明するコメントがある・必要があると思われるとき
:VS Codeではどんな操作になるのか: コードを選択して :guilabel:`Extract variable`
