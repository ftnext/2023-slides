Part 3. カタログ：VS Codeでリファクタリング
============================================================

* 変数名の変更
* 関数名の変更
* 変数の抽出
* **関数の抽出**
* 特性の移動に関する数テクニック

関数の抽出
--------------------------------------------------

* メソッドの抽出も含む（関数、メソッド、同じ意味）
* Webカタログ：https://refactoring.com/catalog/extractFunction.html

「関数の抽出」の使い所 1
--------------------------------------------------

* 処理の一部が **コメントで説明されている** とき
* 「*長い関数*」 （📘『`リファクタリング`_』第3章）
* コードの *自己文書化* （意図と実装を分離して、理解しやすく）

VS Codeを操作して関数を抽出
============================================================

* 処理を選択
* **Extract method**

Extract method
--------------------------------------------------

* Pythonの場合はPython拡張が提供
* https://code.visualstudio.com/docs/python/editing#_extract-method
* VS Codeによって ``new_func`` が抽出されるので、renameする

Extract methodによる「関数の抽出」のデモ💡
--------------------------------------------------

.. literalinclude:: ../../samplecode/vscode-easy-refactoring/extract_method.py
    :language: python
    :start-after: [extract function]
    :end-before: [extract function]
    :linenos:
    :emphasize-lines: 6-8

Extract methodは一足飛び⚠️
--------------------------------------------------

* 📘『リファクタリング』では **まず** は関数内関数（**入れ子**）として抽出する

  * 渡す必要がある引数を1つずつ調整していって、最後に外側のスコープに移す

* IMO：エディタのサポートで楽をしたいが、一足飛びだと嬉しくない場面もあり、**この手順が必要になることも**

📘 まずは関数内関数に抽出 🏃‍♂️
--------------------------------------------------

.. code-block:: python

  def print_owing(invoice):
      print_banner()
      outstanding = calculate_outstanding(invoice)

      print_details()

      # まずは抽出だけ実施し、その後引数を調整します（関数宣言の変更）。最後に関数スコープの外へ
      def print_details():
          print(f"name: {invoice.customer}")
          print(f"amount: {outstanding}")

関数の抽出
============================================================

:どんなときに使うのか: 長い関数で **一部を説明するコメント** があるとき
:VS Codeではどんな操作になるのか: コードを選択して :guilabel:`Extract method`

「関数の抽出」の使い所 2 🏃‍♂️
--------------------------------------------------

* 何度も登場する同じ式（重複は変更を難しくする🥺）
* 「*重複したコード*」（📘『`リファクタリング`_』第3章）
* 重複した式を関数に抽出し、それで置き換えることで重複コードをなくす
