楽々入門！VS Codeで『リファクタリング』
============================================================

    このトークでは、書籍『`リファクタリング`_』で紹介されたテクニックをVS Codeの操作と結び付けて理解するのを目的とします。

`イベントサイト <https://vscodejp.github.io/conference/2022-2023/ja/>`__ より

📘『`リファクタリング`_』
============================================================

    リファクタリングは、ソフトウェアの外部的な振る舞いを保ったままで、内部の構造を改善する作業を指します。

書籍サイト（リンク先）の「内容紹介」より

📘『リファクタリング』
--------------------------------------------------

* Martin Fowler著、「*リファクタリングのガイドブック*」（「内容紹介」より）
* IMO：リファクタリングテクニックをたくさん載せた **カタログ**
* Web版（英語） https://refactoring.com/catalog/

このトークでは
--------------------------------------------------

* 📘『`リファクタリング`_』のテクニックのいくつかを
* **VS Codeの操作と結びつけて** 理解する

おことわり（nikkieの文脈共有兼ねて）
============================================================

* VS CodeのUIは **英語** で紹介
* 本発表のコード例は **Python** （後述）
* 「リファクタリング」のとらえ方（後述）

Pythonのコード例、ぜひ **読み替え** てください
--------------------------------------------------

* Pythonの詳細には立ち入りません
* 📘『`リファクタリング`_』ではJavaScript
* 「*リファクタリングは異なる言語でもほぼ同じような形になります。*」（📘の「はじめに」「JavaScriptによる例」）

「私の知っている *リファクタリング* と異なる！」かも
------------------------------------------------------------

* 異なる＝「小さい！」かもしれません
* このトークの「リファクタリング」は、**開発中に絶えずやる、コードの構造の小さい改善** を指しています
* 数日〜数週かける規模のリファクタリングは想定していません（テクニックは適用できるかも）

開発中に絶えずやる、コードの構造の小さい改善 補足 🏃‍♂️== **skip**
----------------------------------------------------------------------

* XPのプラクティスの1つ **テスト駆動開発**
* 「動作するきれいなコード」を目指す（Red-Green-Refactoring）
* まず動作させ（Green）、次にきれいにする（リファクタリング）。この **小さいサイクルを何回も** 繰り返す
