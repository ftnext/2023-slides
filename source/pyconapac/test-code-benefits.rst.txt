テストコードでいいことこんなに
============================================================

一度書いたコードは改善（変更）を免れない
============================================================

* 持てる知識を全て動員して書いたが、より適切な文法を知らなかった
* Pythonがバージョンアップして文法自体が進化

新しく知った書き方で書き直したい
--------------------------------------------------

* 書き換えることで学びになり、Pythonの力がつく💪
* だが、書き換えたときに **振る舞いを変えていないだろうか**？（不安）

例：FizzBuzz
--------------------------------------------------

.. code-block:: python

    def fizzbuzz(number: int) -> str:
        if number % 3 == 0 and number % 5 == 0:
            return "FizzBuzz"
        elif number % 3 == 0:
            return "Fizz"
        elif number % 5 == 0:
            return "Buzz"
        else:
            return str(number)

https://pycamp.pycon.jp/textbook/2_intro.html#fizzbuzz リスト2.14

Structural Pattern Matchingならこれだけ
--------------------------------------------------

.. code-block:: python

    def fizzbuzz(number: int) -> str:
        match number % 3, number % 5:
            case 0, 0: return "FizzBuzz"
            case 0, _: return "Fizz"
            case _, 0: return "Buzz"
            case _, _: return str(number)

https://gihyo.jp/news/report/01/pyconjp2021/0002

書き換えで振る舞いを変えていないだろうか？
============================================================

不安に対処するいくつかのアプローチ

(A) 祈る 🙏🙏🙏
--------------------------------------------------

* 「どうか変わっていませんように」
* 振る舞いを変えていないか不安だが、何も確認はしない

(B) 手で動作確認 ✋
--------------------------------------------------

* 例えば対話的に ``fizzbuzz`` 関数を実行

.. code-block:: pycon

    >>> from fizzbuzz import fizzbuzz
    >>> fizzbuzz(15)
    'FizzBuzz'

* 関数の数が増えていくと現実的ではなさそう

(C) コードを書いて動作確認 🤖
--------------------------------------------------

* この発表の本題
* 「手で動作確認」の自動化（テストコードを書く）
* プログラムで使う部品のコードは、プログラムを書いて動作確認するという考え方

.. 「単体テスト」はAppendix？

テストコードを書くメリット
============================================================

* 実装中
* 書き換える際

実装中：動作するコード
--------------------------------------------------

* 仕様を満たす動作するコードであると確認できる
* ``fizz(3)`` は ``"Fizz"`` 、 ``fizz(5)`` は ``"Buzz"`` を返すから、この実装は **正しく書けている** 🙌

書き換え：不安を退屈に変える
--------------------------------------------------

* 蓄積されたテストコードによる **回帰テスト**
* テストが全てpassすれば、書き換えで変更していない
* テストが1つでもfailしたら、書き換えで何かおかしくしてしまった（気づける）

テストコードを書くデメリット
--------------------------------------------------

* 書くコードは増えている（実装 + テストコード）
* 📣でも、デメリット << メリットだと思うから、練習して書けるようになるんだ！

🥟テストコードはPythonの力をつける下地（N=1）
============================================================

* テストコードにより、「この実装は仕様を満たす動作するコード」と言える
* 回帰テストができるので、実装を書き直したときに振る舞いを変えたことに気づける

  * 新しく知った文法を試して、力を付けていける！
