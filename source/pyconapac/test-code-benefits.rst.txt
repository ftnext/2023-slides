テストコードでいいことこんなに
============================================================

一度書いたコードは変更を免れない
============================================================

* 持てる知識を全て動員して書いたが、より適切な文法を知らなかった
* Pythonがバージョンアップして文法自体が進化

新しく知った書き方で書き直したい
--------------------------------------------------

* 書き換えることで学びになる
* 書き換えたときに、振る舞いを変えていないだろうか？（不安）

例：FizzBuzz
--------------------------------------------------

.. code-block:: python

    def fizzbuzz(number: int) -> str:
        if number % 3 == 0 and number % 5 == 0:
            return "FizzBuzz"
        elif number % 3 == 0:
            return "Fizz"
        elif number % 5 == 0:
            return "Buzz"
        else:
            return str(number)

https://pycamp.pycon.jp/textbook/2_intro.html#fizzbuzz リスト2.14

Structural Pattern Matchingならこれだけ
--------------------------------------------------

.. code-block:: python

    def fizzbuzz(number: int) -> str:
        match number % 3, number % 5:
            case 0, 0: return "FizzBuzz"
            case 0, _: return "Fizz"
            case _, 0: return "Buzz"
            case _, _: return str(number)

https://gihyo.jp/news/report/01/pyconjp2021/0002

書き換えで振る舞いを変えていないだろうか？
============================================================

いくつかのアプローチを紹介

祈る
--------------------------------------------------

* 「どうか変わっていませんように」

手で動作確認
--------------------------------------------------

* 例えば対話的に ``fizzbuzz`` 関数を実行

.. code-block:: pycon

    >>> from fizzbuzz import fizzbuzz
    >>> fizzbuzz(15)
    'FizzBuzz'

* 関数の数が増えていくと現実的ではなさそう

コードを書いて動作確認
--------------------------------------------------

* この発表の本題
* 他のプログラムが使う関数は、人手でなくプログラム（＝テストコード）で動作確認する
* 単体テストのテストコード

不安を退屈に変える
--------------------------------------------------

* 蓄積されたテストコードによる回帰テスト
* テストが全てpassすれば、書き換えで変更していない
* テストが1つでもfailすれば、書き換えで何かおかしくしてしまった

🥟テストコードはPythonの力をつける下地（N=1）
============================================================

* 知らない文法を習得するために書き直したいが、振る舞いを変えていないだろうか
* 回帰テストができるので、振る舞いを変えたことに気づける
* どう書くかをこのあと2通り紹介
