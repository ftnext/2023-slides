pytest
============================================================

* サードパーティライブラリ https://pypi.org/project/pytest/
* :command:`pip install pytest`
* ヒミツ：古くは py.test だった

pytestで書くテストは **3** ステップ
============================================================

1. テストコードのファイルを作る
2. テストコードとして、関数を書く
3. assert文

Step1 pytestの規則に従った **ファイル**
--------------------------------------------------

* ``test_`` で始まるPythonファイルを作成

.. 一般のプロジェクトでは tests ディレクトリの下

.. code-block::

    .
    ├── fizzbuzz.py
    └── test_fizzbuzz.py

Step2 pytestの規則に従った **関数**
--------------------------------------------------

* ``test_`` で始まる関数を書く

.. code-block:: python
    :caption: test_fizzbuzz.py

    def test_3の倍数のときはFizzを返す():
        ...

Step3 Pythonの **assert文**
--------------------------------------------------

* ``assert 式``
* 式が ``True`` と評価されるかを検証

https://docs.python.org/ja/3/reference/simple_stmts.html#the-assert-statement

assert文の例
--------------------------------------------------

.. code-block:: pycon

    >>> assert 1 == 1
    >>> assert 1 == 2
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    AssertionError

3Aでとらえるpytest
--------------------------------------------------

.. code-block:: python
    :caption: test_fizzbuzz.py

    def test_3の倍数のときはFizzを返す():
        number = 3  # Arrange
          # Act & Assert (actual == expected)
        assert fizzbuzz(number) == "Fizz"

.. 1つの関数の中で3Aを行います

テスト実行 :command:`pytest -v`
--------------------------------------------------

.. code-block::

    .
    ├── fizzbuzz.py
    └── test_fizzbuzz.py

.. code-block:: shell

    $ pytest -v
    ============================= test session starts ==============================
    
    collected 5 items

    ============================== 5 passed in 0.01s ===============================

failしたテスト（15でFizzを返した）
--------------------------------------------------

.. code-block:: shell

    test_fizzbuzz.py::test_15の倍数のときはFizzBuzzを返す FAILED             [ 20%]

    =================================== FAILURES ===================================
    __________________________ test_15の倍数のときはFizzBuzzを返す ___________________________

        def test_15の倍数のときはFizzBuzzを返す():
    >       assert fizzbuzz(15) == "FizzBuzz"
    E       AssertionError: assert 'Fizz' == 'FizzBuzz'
    E         - FizzBuzz
    E         + Fizz

* assert文だが、 **diffが分かりやすい**

pytestは **assert文を拡張**
--------------------------------------------------

* テストコードに使うのはassert文だけと **簡単**
* failしたテストのdiffが **分かりやすい**

  * 秘密は *pytestがassert文を書き換え* ている（`assertion rewriting <https://docs.pytest.org/en/latest/how-to/writing_plugins.html#assertion-rewriting>`__）

pytestで **docstringの対話例も** 実行できる🏃‍♂️
--------------------------------------------------

* :command:`pytest --doctest-modules`
* https://docs.pytest.org/en/stable/how-to/doctest.html

パラメタ化テスト
============================================================

.. code-block:: python

    def test_3の倍数のときはFizzを返す():
        ...

3の倍数ならFizz
--------------------------------------------------

``number`` の **取りうる値は複数**

* 3
* 6
* 9

個別にテストの関数を書く？
--------------------------------------------------

.. code-block:: python

    def test_3の倍数のときはFizzを返す_3の場合():
        ...

    def test_3の倍数のときはFizzを返す_6の場合():
        ...

``@pytest.mark.parametrize`` を使おう
--------------------------------------------------

.. literalinclude:: ../../samplecode/python-testing/pytest-example/test_fizzbuzz.py
    :language: python
    :pyobject: test_3の倍数のときはFizzを返す

1つの関数、複数のテストケース
--------------------------------------------------

.. code-block:: shell

    $ pytest -v

    test_fizzbuzz.py::test_3の倍数のときはFizzを返す[3] PASSED               [ 40%]
    test_fizzbuzz.py::test_3の倍数のときはFizzを返す[6] PASSED               [ 60%]

**個別に書いたのと同じ** 結果が得られる

モック
============================================================

やや発展的話題（いまは分からなかったとしても大丈夫）

複数の処理を呼び出す実装のテストコードを書く
--------------------------------------------------

* テストを書きたい関数 ``foo``
* 処理A -> B -> Cの順で呼び出している

.. literalinclude:: ../../samplecode/python-testing/pytest-example/test_with_mock.py
    :language: python
    :pyobject: foo

どうテストコードを書くか？
--------------------------------------------------

* 全ての処理を通したテストも書ける
* 推し：呼び出される処理を **ニセモノ（＝モック）に置き換え** てテスト

モックを使ったテスト
--------------------------------------------------

* ``foo`` 関数で呼び出す各処理を *何もしない* （＝モック）に置き換える
* **モックは呼び出され方を記憶** している
* 処理Aがこれこれを引数に呼び出されたかをAssertする

モックを使ったテストの例
--------------------------------------------------

.. literalinclude:: ../../samplecode/python-testing/pytest-example/test_with_mock.py
    :language: python
    :pyobject: test_foo

* 処理の **呼び出しを検証**
* 処理A,B,C自体はいずれも別途、徹底的に検証

🥟pytest まとめ
============================================================

* ``test_`` で始まるファイル
* ``test_`` で始まる関数。assert文を使う
* テストに慣れてきたらぜひ試してみてください！
