pytest
============================================================

.. サードパーティライブラリ https://pypi.org/project/pytest/

.. ずっと昔はpy.test

pytestで書くテスト
============================================================

* 関数を書く
* assert文

pytestの規則に従った関数
--------------------------------------------------

* ``test_`` で始まるPythonファイルに
* ``test_`` で始まる関数を書く

.. code-block:: python
    :caption: test_fizzbuzz.py

    def test_3の倍数のときはFizzを返す():
        ...

Pythonのassert文
--------------------------------------------------

* ``assert 式``
* 式が ``True`` と評価されるかを検証

https://docs.python.org/ja/3/reference/simple_stmts.html#the-assert-statement

assert文の例
--------------------------------------------------

.. code-block:: pycon

    >>> assert 1 == 1
    >>> assert 1 == 2
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    AssertionError

3Aで理解するpytest
--------------------------------------------------

.. code-block:: python
    :caption: test_fizzbuzz.py

    def test_3の倍数のときはFizzを返す():
        number = 3  # Arrange
        assert fizzbuzz(number) == "Fizz"  # Act & Assert

.. pytestコマンドを実行（ファイルツリー）

pytestは **assert文を拡張**
--------------------------------------------------

* assert文だが、diffがわかりやすい

  * 15でFizzを返した例

* 実はpytestがassert文を書き換えて、分かりやすいdiffを実現している（assertion rewriting）

.. TODO pytestでdoctestも実行できる

パラメタ化テスト
============================================================

.. code-block:: python

    def test_3の倍数のときはFizzを返す():
        ...

3の倍数ならFizz
--------------------------------------------------

* 3
* 6
* 9

個別にテストの関数を書く？
--------------------------------------------------

.. code-block:: python

    def test_3の倍数のときはFizzを返す_3の場合():
        ...

    def test_3の倍数のときはFizzを返す_6の場合():
        ...

``@pytest.mark.parametrize`` を使おう
--------------------------------------------------

.. code-block:: python

    @pytest.mark.parametrize("number", [3, 6])
    def test_3の倍数のときはFizzを返す(number):
        assert fizzbuzz(number) == "Fizz"

1つの関数、複数のテストケース
--------------------------------------------------

TODO 実行結果

個別に書いたのと同じ結果が得られる

モック
============================================================

TODO 見直し

部品ごとにテストする
--------------------------------------------------

* 全て通さないテストコード
* ある部品の呼び出し方を検証
* 部品自体は徹底的に検証

.. TODO 例を出す

モックを使って部品をテスト
--------------------------------------------------

* ある部品をモックにする
* モックは呼び出され方を覚えている -> 検証できる
* モックにした部品自体は、単体テストで徹底的に検証
