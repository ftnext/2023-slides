doctest
============================================================

* 標準ライブラリ
* https://docs.python.org/ja/3/library/doctest.html

    対話的な実行例をテストする

.. doctestは標準ライブラリにあります。
    私は好きなライブラリです。
    どんなライブラリかというと「Test interactive Python examples」

関数のdocstring
============================================================

    クラス、関数、モジュールの最初の式である文字列リテラル

    オブジェクトのドキュメントを書く標準的な場所

https://docs.python.org/ja/3/glossary.html#term-docstring

.. 関数にはdocstringというものがありますよね。
    用語集を引くと、
    A string literal which appears as the first expression in a function.
    it(docstring) is the canonical place for documentation of the object.

ドキュメンテーション文字列 とも
--------------------------------------------------

* https://docs.python.org/ja/3/tutorial/controlflow.html#tut-docstrings
* **三連引用符** を用い、複数行にまたがった文字列リテラルとすることがほとんど

.. docstringはドキュメンテーション文字列(Documentation Strings)とも呼ばれます。
    クォートを3つ連続させた文字列にします。
    改行を含められるので、複数行にまたがった文字列がほとんどです（TODO スライド組み換え？）
    百聞は一見にしかずです。

.. https://docs.python.org/ja/3/tutorial/introduction.html#text

docstringの例
--------------------------------------------------

.. code-block:: python

    def fizzbuzz(number: int) -> str:
        """FizzBuzzゲームを解く関数（：1行要約）

        ...（後述）...
        """

.. fizzbuzz関数にdocstringを書きました。
    関数定義（def）の直後に三連引用符を使った文字列を書いています

.. テストを通すための定義
    >>> def fizzbuzz(number: int) -> str:
    ...     if number % 3 == 0 and number % 5 == 0:
    ...         return "FizzBuzz"
    ...     elif number % 3 == 0:
    ...         return "Fizz"
    ...     elif number % 5 == 0:
    ...         return "Buzz"
    ...     else:
    ...         return str(number)

Python対話モードの **実行例をdocstringに書く**
--------------------------------------------------

.. literalinclude:: ../../samplecode/python-testing/doctest-example/fizzbuzz.py
    :language: python
    :lines: 1-3,6-9,14

.. docstringの続きには、Pythonの対話モードでfizzbuzz関数を実行したときの実行例を書きます。
    1のときは文字列1、3のときはFizz

対話モードの実行例を **テストとして実行**
============================================================

.. code-block:: txt

    .
    └── fizzbuzz.py

* :command:`python -m doctest fizzbuzz.py`

.. docstringに実行例を書いたファイルだけを作り、python -m doctestに相対パスを渡してテストを実行します。
    passするときは何もいいません

実行結果の確認（:command:`-v` オプション）
--------------------------------------------------

.. code-block:: shell

    $ python -m doctest fizzbuzz.py -v
    Trying:
        fizzbuzz(1)
    Expecting:
        '1'
    ok

    4 passed and 0 failed.
    Test passed.

.. -vオプションを付けてdoctestを実行すると、実行結果が詳細に出力されます。
    テスト4つが通り、失敗はなし。テスト全体はpassしました

関数のdocstringに限らず使えます
--------------------------------------------------

nikkieはテキストファイル（特にreStructuredText）で頻繁に使用

* 書籍執筆
* **発表資料** 作成（本資料含む）

.. 私はPythonファイルに限らずdoctestを使います。
    このスライドのPythonの対話例はdoctestが通っているので、不安を感じずに登壇できています

利用シーン：ライブラリのドキュメントにも
--------------------------------------------------

* 例：scikit-learn

.. code-block:: pycon

    >>> from sklearn.metrics import f1_score  # doctest: +SKIP
    >>> f1_score(y_true, y_pred, average='macro')  # doctest: +ELLIPSIS +SKIP
    0.26...

https://scikit-learn.org/stable/modules/generated/sklearn.metrics.f1_score.html

.. doctestは有名なライブラリのドキュメントでも使われています。
    これはscikit-learnの例です（TODO ソースコード？）
    ？PyTorch

doctestの注意点
============================================================

.. doctestには気をつけなければならない点があります。
    先ほどのコードとの違いは文字列がダブルクォートという点だけです

.. 以下のコードのdoctestを通すだけのコード（doctest: +SKIPがtrimされないため）
    >>> def fizzbuzz(number):
    ...     print('"Fizz"')

.. code-block:: python

    def fizzbuzz(number: int) -> str:
        """FizzBuzzゲームを解く関数

        >>> fizzbuzz(3)
        "Fizz"

        """

.. 残りのテストを通すための定義
    >>> def fizzbuzz(number: int) -> str:
    ...     if number % 3 == 0 and number % 5 == 0:
    ...         return "FizzBuzz"
    ...     elif number % 3 == 0:
    ...         return "Fizz"
    ...     elif number % 5 == 0:
    ...         return "Buzz"
    ...     else:
    ...         return str(number)

文字列に **ダブルクォート** を使ったらテストがfail😱
------------------------------------------------------------

.. code-block:: shell

    $ python -m doctest fizzbuzz.py
    Failed example:
        fizzbuzz(3)
    Expected:
        "Fizz"
    Got:
        'Fizz'
    
    ***Test Failed*** 1 failures.

.. このテストは落ちてしまいます。
    期待値はダブルクォートで囲まれたFizz、実際の値はシングルクォートで囲まれたFizz。
    doctestはこの2つを別物として扱うので、テストが落ちます

焦点：対話モードの出力結果として一致するか
--------------------------------------------------

* 対話モードでは **文字列** は基本 **シングルクォート** で囲まれる

.. code-block:: pycon

    >>> "Fizz"
    'Fizz'

* doctestでも文字列はシングルクォートにする必要がある

.. ポイントとしては、doctestは対話モードの出力結果として一致するかを見ているので、それを念頭に考えるということです。
    対話モードでダブルクォートで囲んだ文字列を入力しても、出力はシングルクォート囲みですね。
    doctestでは文字列はシングルクォートにする必要がある

対話モードは ``repr`` 関数の返り値
--------------------------------------------------

    repr() 関数はインタープリタに読める（略）表現を返すためのもの

https://docs.python.org/ja/3/tutorial/inputoutput.html#fancier-output-formatting

.. reprという組み込み関数があります。
    対話例の出力は、reprの返り値と思っていただければと思います

``repr`` 関数の返り値であることを利用した例 🏃‍♂️ (skip)
------------------------------------------------------------

.. literalinclude:: ../../samplecode/python-testing/doctest-example/example_repr.py
    :language: python
    :pyobject: Awesome

（クラスのdocstringでdoctestの例にもなってます）

doctestから見るテストコードの書き方
============================================================

.. literalinclude:: ../../samplecode/python-testing/doctest-example/fizzbuzz.py
    :language: python
    :lines: 1-3,8-9,14

* 実行例を書くだけで、関数に **ある値を入力したときの出力** を検証できた
* *3A* という見方を導入

.. 別の話題、doctestから見るテストコードの書き方
    実行例を書くだけで、関数にある値を入力したときの出力を検証できましたが、
    ここで3A(three A)という見方を導入します

3A
--------------------------------------------------

* Arrange 準備
* Act 実行
* Assert 検証

https://xp123.com/articles/3a-arrange-act-assert/

.. 3つのAでして、Arrange・Act・Assertです。

3Aで見るdoctest
--------------------------------------------------

※コメントを使って説明するため、対話モードで示します

.. code-block:: pycon

    >>> number = 3
    >>> fizzbuzz(number)
    'Fizz'

.. docstringではなく対話モードを使って、3Aとは何かを示していきます

Arrange
--------------------------------------------------

テストの **準備** （データの用意など）

.. code-block:: pycon
    :emphasize-lines: 1

    >>> number = 3
    >>> fizzbuzz(number)
    'Fizz'

.. Arrangeはテストの準備です。ここでは簡単ですが、number変数に3を代入しました

Act
--------------------------------------------------

テスト対象の関数を **実行**

.. code-block:: pycon
    :emphasize-lines: 2

    >>> number = 3
    >>> fizzbuzz(number)
    'Fizz'

.. テスト対象の関数の実行がAct
    numberをfizzbuzz関数に渡す

Assert
--------------------------------------------------

実行結果が期待値と等しいかを **検証**

.. code-block:: pycon
    :emphasize-lines: 3

    >>> number = 3
    >>> fizzbuzz(number)
    'Fizz'

.. 返り値が期待値と一致するかを検証するのがAssert
    この3Aをテストを書くときに意識しています。

第4のA：Annihilate 🏃‍♂️ (skip)
--------------------------------------------------

* クリーンアップ
* 『`ロバストPython <https://www.oreilly.co.jp/books/9784814400171/>`__』第21章より

🥟doctest まとめ
============================================================

* 対話モードの **実行例を、docstringに書くだけ**！
* :command:`python -m doctest` にPythonファイルを渡してテスト実行
* テストコードの一歩目として非常にオススメです

.. doctestをまとめますと
    対話モードの実行例を、docstringに書くだけで、テストできちゃう！
    コマンドはpython -m doctestです。
    テストコードを書いてみようと思ったらdoctestが一番書きやすいと思います
