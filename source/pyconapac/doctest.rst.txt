doctest
============================================================

* 標準ライブラリ
* https://docs.python.org/ja/3/library/doctest.html

    対話的な実行例をテストする

関数のdocstring
============================================================

    クラス、関数、モジュールの最初の式である文字列リテラル

    オブジェクトのドキュメントを書く標準的な場所

https://docs.python.org/ja/3/glossary.html#term-docstring

ドキュメンテーション文字列
--------------------------------------------------

* https://docs.python.org/ja/3/tutorial/controlflow.html#tut-docstrings
* a.k.a. docstring
* **三連引用符** を用い、複数行にまたがった文字列リテラルとすることがほとんど

.. https://docs.python.org/ja/3/tutorial/introduction.html#text

docstringの例
--------------------------------------------------

.. code-block:: python

    def fizzbuzz(number: int) -> str:
        """FizzBuzzゲームを解く関数（：1行要約）
        
        ...（後述）...
        """

Python対話モードの実行例をdocstringに書く
--------------------------------------------------

.. code-block:: python

    def fizzbuzz(number: int) -> str:
        """FizzBuzzゲームを解く関数
        
        >>> fizzbuzz(1)
        '1'
        >>> fizzbuzz(3)
        'Fizz'
        """

対話モードの実行例をテストとして実行
============================================================

.. code-block::

    .
    └── fizzbuzz.py

* :command:`python -m doctest fizzbuzz.py`

実行結果の確認（:command:`-v` オプション）
--------------------------------------------------

.. code-block::

    $ python -m doctest fizzbuzz.py -v
    Trying:
        fizzbuzz(1)
    Expecting:
        '1'
    ok

    4 passed and 0 failed.
    Test passed.

docstringに限らず使えます
--------------------------------------------------

nikkieはテキストファイル（特にreStructuredText）で頻繁に使用

* 書籍執筆
* 発表資料作成（本資料含む）

利用シーン：ライブラリのドキュメントにも
--------------------------------------------------

* 例：scikit-learn

.. code-block:: pycon

    >>> from sklearn.metrics import f1_score
    >>> f1_score(y_true, y_pred, average='macro')
    0.26...

https://scikit-learn.org/stable/modules/generated/sklearn.metrics.f1_score.html

doctestの注意点
============================================================

.. code-block:: python

    def fizzbuzz(number: int) -> str:
        """FizzBuzz関数
        
        >>> fizzbuzz(3)
        "FIzz"
        """

文字列にダブルクォートを使ったらテストがfail😱
--------------------------------------------------

.. code-block::

    $ python -m doctest fizzbuzz.py
    Failed example:
        fizzbuzz(3)
    Expected:
        "Fizz"
    Got:
        'Fizz'
    
    ***Test Failed*** 1 failures.

焦点：対話モードの出力結果として一致するか
--------------------------------------------------

* 対話モードでは **文字列** は基本 **シングルクォート** で囲まれる
* doctestでも文字列はシングルクォートにする必要がある

対話モードは ``repr`` 関数の返り値
--------------------------------------------------

    repr() 関数はインタープリタに読める（略）表現を返すためのもの

https://docs.python.org/ja/3/tutorial/inputoutput.html#fancier-output-formatting

doctestから見るテストコードの書き方
============================================================

.. code-block:: python

    def fizzbuzz(number: int) -> str:
        """
        >>> fizzbuzz(3)
        'Fizz'
        """

* 実行例を書くだけで、関数に **ある値を入力したときの出力** を検証できた
* *3A* という見方を導入

3A
--------------------------------------------------

* Arrange 準備
* Act 実行
* Assert 検証

https://xp123.com/articles/3a-arrange-act-assert/

3Aで見るdoctest
--------------------------------------------------

コメントを使った説明のため、対話モードで示します

.. code-block:: pycon

    >>> number = 3
    >>> fizzbuzz(number)
    'Fizz'

Arrange
--------------------------------------------------

テストの **準備** （データの用意など）

.. code-block:: pycon
    :emphasize-lines: 1

    >>> number = 3
    >>> fizzbuzz(number)
    'Fizz'

Act
--------------------------------------------------

テスト対象の関数を **実行**

.. code-block:: pycon
    :emphasize-lines: 2

    >>> number = 3
    >>> fizzbuzz(number)
    'Fizz'

Arrange
--------------------------------------------------

実行結果が期待値と等しいかを **検証**

.. code-block:: pycon
    :emphasize-lines: 3

    >>> number = 3
    >>> fizzbuzz(number)
    'Fizz'
