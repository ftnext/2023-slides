doctest
============================================================

* 標準ライブラリ
* https://docs.python.org/ja/3/library/doctest.html

    対話的な実行例をテストする

.. doctest is part of the standard library.
    It's one of my favorite libraries.
    What kind of library is it? It's for "Testing interactive Python examples."

.. doctestは標準ライブラリにあります。
    私は好きなライブラリです。
    どんなライブラリかというと「Test interactive Python examples」

関数のdocstring
============================================================

    クラス、関数、モジュールの最初の式である文字列リテラル

    オブジェクトのドキュメントを書く標準的な場所

https://docs.python.org/ja/3/glossary.html#term-docstring

.. We can write something called a docstring in functions, right?
    If we look it up in the glossary,
    it's described as "A string literal which appears as the first expression in a function.
    it(docstring) is the canonical place for documentation of the object."

.. 関数にはdocstringというものがありますよね。
    用語集を引くと、
    A string literal which appears as the first expression in a function.
    it(docstring) is the canonical place for documentation of the object.

ドキュメンテーション文字列 とも
--------------------------------------------------

* https://docs.python.org/ja/3/tutorial/controlflow.html#tut-docstrings
* **三連引用符** を用い、複数行にまたがった文字列リテラルとすることがほとんど

.. docstring is also referred to as Documentation Strings.
    It's written using three consecutive quotes.
    Most of the time, it spans multiple lines since it can include line breaks.
    Let's look an example. Seeing is believing.

.. docstringはドキュメンテーション文字列(Documentation Strings)とも呼ばれます。
    クォートを3つ連続させた文字列にします。
    改行を含められるので、複数行にまたがった文字列がほとんどです（TODO スライド組み換え？）
    百聞は一見にしかずです。

.. https://docs.python.org/ja/3/tutorial/introduction.html#text

docstringの例
--------------------------------------------------

.. code-block:: python

    def fizzbuzz(number: int) -> str:
        """FizzBuzzゲームを解く関数（：1行要約）

        ...（後述）...
        """

.. I've written a docstring for the fizzbuzz function.
    After the function definition (def keyword), I've written a string using three consecutive quotes.

.. fizzbuzz関数にdocstringを書きました。
    関数定義（def）の直後に三連引用符を使った文字列を書いています

.. テストを通すための定義
    >>> def fizzbuzz(number: int) -> str:
    ...     if number % 3 == 0 and number % 5 == 0:
    ...         return "FizzBuzz"
    ...     elif number % 3 == 0:
    ...         return "Fizz"
    ...     elif number % 5 == 0:
    ...         return "Buzz"
    ...     else:
    ...         return str(number)

Python対話モードの **実行例をdocstringに書く**
--------------------------------------------------

.. literalinclude:: ../../samplecode/python-testing/doctest-example/fizzbuzz.py
    :language: python
    :lines: 1-3,6-9,14

.. In the docstring, I've written examples of what it would look like when you run the fizzbuzz function in Python's interactive mode.
    Given 1, it returns the string "1", and Given 3, it returns "Fizz."

.. docstringの続きには、Pythonの対話モードでfizzbuzz関数を実行したときの実行例を書きます。
    1のときは文字列1、3のときはFizz

対話モードの実行例を **テストとして実行**
============================================================

.. code-block:: txt

    .
    └── fizzbuzz.py

* :command:`python -m doctest fizzbuzz.py`

.. You have a file with tests written in the docstring,
    then run it using command python -m doctest followed by the relative path to the file.
    If the tests pass, there's no output.

.. docstringに実行例を書いたファイルだけを作り、python -m doctestに相対パスを渡してテストを実行します。
    passするときは何も出力しません

実行結果の確認（:command:`-v` オプション）
--------------------------------------------------

.. code-block:: shell

    $ python -m doctest fizzbuzz.py -v
    Trying:
        fizzbuzz(1)
    Expecting:
        '1'
    ok

    4 passed and 0 failed.
    Test passed.

.. When you run doctest with the -v option, detailed test results are displayed.
    Four tests passed, no failures. All tests have passed!

.. -vオプションを付けてdoctestを実行すると、実行結果が詳細に出力されます。
    テスト4つが通り、失敗はなし。テスト全体はpassしました

関数のdocstringに限らず使えます
--------------------------------------------------

nikkieはテキストファイル（特にreStructuredText）で頻繁に使用

* 書籍執筆
* **発表資料** 作成（本資料含む）

.. I use doctest not just in Python files.
    The interactive Python examples in this slide have passed doctest, so I can present without any worries.

.. 私はPythonファイルに限らずdoctestを使います。
    このスライドのPythonの対話例はdoctestが通っているので、不安を感じずに登壇できています

利用シーン：ライブラリのドキュメントにも
--------------------------------------------------

* 例：scikit-learn

.. code-block:: pycon

    >>> from sklearn.metrics import f1_score  # doctest: +SKIP
    >>> f1_score(y_true, y_pred, average='macro')  # doctest: +ELLIPSIS +SKIP
    0.26...

https://scikit-learn.org/stable/modules/generated/sklearn.metrics.f1_score.html

.. doctest is also used in the documentation of popular libraries.
    Here's an example from scikit-learn.

.. doctestは有名なライブラリのドキュメントでも使われています。
    これはscikit-learnの例です（TODO ソースコード？）
    ？PyTorch

doctestの注意点
============================================================

.. There are some nuances you should be aware of when using doctest.
    The only difference between the code we looked at earlier and this one is that the string is enclosed with double quotes.

.. doctestには気をつけなければならない点があります。
    先ほどのコードとの違いは文字列がダブルクォートという点だけです

.. 以下のコードのdoctestを通すだけのコード（doctest: +SKIPがtrimされないため）
    >>> def fizzbuzz(number):
    ...     print('"Fizz"')

.. code-block:: python

    def fizzbuzz(number: int) -> str:
        """FizzBuzzゲームを解く関数

        >>> fizzbuzz(3)
        "Fizz"

        """

.. 残りのテストを通すための定義
    >>> def fizzbuzz(number: int) -> str:
    ...     if number % 3 == 0 and number % 5 == 0:
    ...         return "FizzBuzz"
    ...     elif number % 3 == 0:
    ...         return "Fizz"
    ...     elif number % 5 == 0:
    ...         return "Buzz"
    ...     else:
    ...         return str(number)

文字列に **ダブルクォート** を使ったらテストがfail😱
------------------------------------------------------------

.. code-block:: shell

    $ python -m doctest fizzbuzz.py
    Failed example:
        fizzbuzz(3)
    Expected:
        "Fizz"
    Got:
        'Fizz'
    
    ***Test Failed*** 1 failures.

.. This test will fail.
    The expected value is "Fizz" enclosed with double quotes, but the actual value is 'Fizz' enclosed with single quotes.
    doctest treats these two as distinct, resulting in a failed test.

.. このテストは落ちてしまいます。
    期待値はダブルクォートで囲まれたFizz、実際の値はシングルクォートで囲まれたFizz。
    doctestはこの2つを別物として扱うので、テストが落ちます

焦点：対話モードの出力結果として一致するか
--------------------------------------------------

* 対話モードでは **文字列** は基本 **シングルクォート** で囲まれる

.. code-block:: pycon

    >>> "Fizz"
    'Fizz'

* doctestでも文字列はシングルクォートにする必要がある

.. The key takeaway is that doctest checks for matches against the interactive mode's output.
    When you input a string enclosed with double quotes in interactive mode, the output will be enclosed with single quotes.
    In doctest, strings should be enclosed with single quotes.

.. ポイントとしては、doctestは対話モードの出力結果として一致するかを見ているので、それを念頭に考えるということです。
    対話モードでダブルクォートで囲んだ文字列を入力しても、出力はシングルクォート囲みですね。
    doctestでは文字列はシングルクォートにする必要がある

対話モードは ``repr`` 関数の返り値
--------------------------------------------------

    repr() 関数はインタープリタに読める（略）表現を返すためのもの

https://docs.python.org/ja/3/tutorial/inputoutput.html#fancier-output-formatting

.. There's a built-in function called repr.
    You can think of the output in interactive examples as the return value of repr.

.. reprという組み込み関数があります。
    対話例の出力は、reprの返り値と思っていただければと思います

``repr`` 関数の返り値であることを利用した例 🏃‍♂️ (skip)
------------------------------------------------------------

.. literalinclude:: ../../samplecode/python-testing/doctest-example/example_repr.py
    :language: python
    :pyobject: Awesome

（クラスのdocstringでdoctestの例にもなってます）

doctestから見るテストコードの構成要素
============================================================

.. literalinclude:: ../../samplecode/python-testing/doctest-example/fizzbuzz.py
    :language: python
    :lines: 1-3,8-9,14

* 実行例を書くだけで、関数に **ある値を入力したときの出力** を検証できた
* *3A* という見方を導入

.. Shifting gears to another topic: components of test codes from doctest examples.
    By just writing the interactive example, we can verify the output of the function, given certain value.
    Here, I'd like to introduce the 3A approach.

.. 別の話題、doctestから見るテストコードの構成要素
    実行例を書くだけで、関数にある値を入力したときの出力を検証できましたが、
    ここで3A(three A)という見方を導入します

3A
--------------------------------------------------

* Arrange 準備
* Act 実行
* Assert 検証

https://xp123.com/articles/3a-arrange-act-assert/

.. The three A's stand for Arrange, Act, and Assert.

.. 3つのAでして、Arrange・Act・Assertです。

3Aで見るdoctest
--------------------------------------------------

※コメントを使って説明するため、対話モードで示します

.. code-block:: pycon

    >>> number = 3
    >>> fizzbuzz(number)
    'Fizz'

.. To explain the 3A, I use interactive mode instead of using a docstring,

.. docstringではなく対話モードを使って、3Aとは何かを示していきます

Arrange
--------------------------------------------------

テストの **準備** （データの用意など）

.. code-block:: pycon
    :emphasize-lines: 1

    >>> number = 3
    >>> fizzbuzz(number)
    'Fizz'

.. 'Arrange' is about setting up for the test.
    In this case, we just assign 3 to the variable number.

.. Arrangeはテストの準備です。ここでは簡単ですが、number変数に3を代入しました

Act
--------------------------------------------------

テスト対象の関数を **実行**

.. code-block:: pycon
    :emphasize-lines: 2

    >>> number = 3
    >>> fizzbuzz(number)
    'Fizz'

.. 'Act' refers to executing the function being tested.
    We pass number to the fizzbuzz function.

.. テスト対象の関数の実行がAct
    numberをfizzbuzz関数に渡す

Assert
--------------------------------------------------

実行結果が期待値と等しいかを **検証**

.. code-block:: pycon
    :emphasize-lines: 3

    >>> number = 3
    >>> fizzbuzz(number)
    'Fizz'

.. 'Assert' is about verifying if the returned value matches the expected.
    When writing tests, I always keep these 3A in mind.

.. 返り値が期待値と一致するかを検証するのがAssert
    この3Aをテストを書くときに意識しています。

第4のA：Annihilate 🏃‍♂️ (skip)
--------------------------------------------------

* クリーンアップ
* 『`ロバストPython <https://www.oreilly.co.jp/books/9784814400171/>`__』第21章より

🥟doctest まとめ
============================================================

* 対話モードの **実行例を、docstringに書くだけ**！
* :command:`python -m doctest` にPythonファイルを渡してテスト実行
* テストコードの一歩目として非常にオススメです

.. To summarize doctest:
    You can test by writing the interactive mode's example in the docstring!
    The command is python -m doctest.
    If you're thinking of trying your hand at writing test codes, I believe doctest is the easiest place to start.

.. doctestをまとめますと
    対話モードの実行例を、docstringに書くだけで、テストできちゃう！
    コマンドはpython -m doctestです。
    テストコードを書いてみようと思ったらdoctestが一番書きやすいと思います
