============================================================
[ドラフト版] XPで取り組むMLOps
============================================================

XP（エクストリームプログラミング）

2023/03/09 第29回MLOps勉強会 nikkie

お前、誰よ
============================================================

ユーザベースには、2つの開発チーム
============================================================

* BtoB向けSaaSプラットフォームの開発チーム 🙋‍♂️
* ビジネスパーソン向けメディアサービスの開発チーム

.. https://tech.uzabase.com/ スクショ差し込む余地あり

こんなチームで働いています（異能は才能）
--------------------------------------------------

.. include:: what-is-xp.rst.txt

いくつか、おことわりを
============================================================

1 ここまで聞いて「この人"データサイエンティスト"だけど私とはだいぶ違うかも？」
--------------------------------------------------

目的は、 **事業に価値を** 提供すること
--------------------------------------------------

* データサイエンティストだからデータを使って価値提供
* この場に集った私たち参加者で共有できるのではなかろうか

お互いに学び合いましょう
--------------------------------------------------

* ポイントは **読み替え** だと思います
* 勉強会での発表を読み替えて知見を見出すの、私、大好きなんです

自分の文脈に読み替えよう
--------------------------------------------------

    私たちは、他者の実践の背景にどんな状況、制約があったのかを理解し、自分たちの状況、制約の下ではどのように実践するべきなのか捉え直さないといけない。

『カイゼン・ジャーニー』(Kindle の位置No.231-233)

2 機械学習システムにソフトウェアエンジニアリングでアプローチ
--------------------------------------------------

SaaS事業の開発チームの現在のやり方

GoogleのRules of Machine Learningにも
--------------------------------------------------

    do machine learning like the great engineer you are, not like the great machine learning expert you aren't.

3 *小さなリリース* を積み重ねた半ばです
--------------------------------------------------

* この場で話すのは現時点の暫定解
* 小さいリリースを重ねた中での到達点であり、今後に続く小さなリリースの中で更新される

SaaS事業におけるデータサイエンス
============================================================

経済情報を使ったプロダクト

TODO 図

SaaS事業の課題設定
--------------------------------------------------

先行スライドを参考に紹介

* 企業の業界推定

事例1 日々の開発
============================================================

* 基本コンポーネント
* パイプライン

パイプライン
--------------------------------------------------

    The infrastructure surrounding a machine learning algorithm.

https://developers.google.com/machine-learning/guides/rules-of-ml?hl=en#terminology

scikit-learnの ``Pipeline`` ではないです

2つのパイプラインを実装
--------------------------------------------------

* モデル訓練パイプライン
* モデルリリースパイプライン

技術スタック
--------------------------------------------------

パイプライン＝ボタン1つ
--------------------------------------------------

Automation

モデル訓練パイプライン
--------------------------------------------------

構成図

モデルリリースパイプライン
--------------------------------------------------

* 訓練パイプラインで作ったモデルをAPIとしてサーブ
* Blue/Green Deploymentにより、簡単に切り戻せる

課題設定ごとにパイプライン
--------------------------------------------------

（列挙）

パイプラインの中の実装
--------------------------------------------------

* 開発しているのは再利用可能な基本コンポーネント
* （ライブラリ開発に近い）

基本コンポーネント開発
--------------------------------------------------

* 解きたい課題は無数に出てくる
* データが違えば違う問題が解けるようにしている
* R&Dでも利用

目指しているもの
============================================================

* 現時点のもの

再びのサークルオブライフ
--------------------------------------------------

プラクティス（*習慣*）「小さなリリース」
--------------------------------------------------

小さい（ごく小規模な）リリースを頻繁に

前提を揃えている
--------------------------------------------------

* パイプラインによりボタン1つでリリース（リリースしやすい状況を作った）
* リリースは開発で自由にできる。デプロイ（ユーザに届ける）はビジネス判断という切り分け

小さなリリース＝継続的デリバリー
--------------------------------------------------

変更するたびに本番環境にコードをリリース

(今)目指している状態： **CD4ML**
--------------------------------------------------

* Continuous Delivery for Machine Learning
* "機械学習の継続的デリバリー"

私たちの考え
--------------------------------------------------

* 時間をかけてめちゃめちゃいいモデルを作ってデプロイは私たちはしない
* ビジネス価値のあるモデルができたらデプロイ

  * その後も良くしていく（評価指標がカイゼンしたらリリース）

事例2 小さなリリース
============================================================

プラクティスと価値
--------------------------------------------------

* プラクティス（*習慣*）：小さなリリース
* 価値：フィードバック

小さい単位でフィードバックを得る
--------------------------------------------------

* やってみるまでわからない
* アイデアを最小限のコストで試し、 **学ぶ**
* （勾配降下法のイメージ）

例：ハイパーパラメタの探索
--------------------------------------------------

リリースのタイミングを何回も作った
--------------------------------------------------

* めちゃめちゃ時間をかけて探索は私たちはせずに
* 範囲を決める➡️具体値と決めていく中で **何回もリリース**

リリースのタイミングを何回も作った結果
--------------------------------------------------

* 範囲を探索した後、より価値の高い開発へ移れた！
* 小さなリリースのメリット：一部でも価値を届けた状態で方向転換できる

別の例：ルールベースから機械学習への切り替え
--------------------------------------------------

リリースのタイミングを何回も作った
--------------------------------------------------

* モデルもシステムも一度に全部作ることはせずに
* ルールベースと同様のモデルで一度リリース

  * 一からシステム開発する部分をまず作りきった

まずシステムを作りリリースを加速する
--------------------------------------------------

* システム開発が完了しAPIが決まっている
* モデルの性能向上に取り組む中でも小さくリリース

  * APIが決まっているのでリリースしやすい

小さなリリースをするための考え方のコツ
--------------------------------------------------

* 縦スライス
* 何回もやる

縦スライス
--------------------------------------------------

* モデルを作る➡️システムを作る のように部分ごとに完成させる考え方（横スライス）を無視する（練習あるのみ！）
* モデルの性能を抑えても、薄く全部作る

.. 図がないと説明しづらそう

何回もやる（1周、2周、3周、...）
--------------------------------------------------

* 1周目はゼロから作るので重い。小さく絞る

  * 2周目以降の生産性が上がるように選ぶ（例ではシステムを優先した）

* 2周目以降は1周目でできているものが使える

まとめ
============================================================

* 基本コンポーネント・パイプライン開発
* 小さなリリースの反復
* CD4ML
