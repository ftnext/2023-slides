事例2 小さなリリース
============================================================

XPの価値の1つ：フィードバック
--------------------------------------------------

* ゴールに近づくためにフィードバックを使う

  * データを使って事業に価値を提供したい！
  * でも、最初はそのやり方が、わかんない！

.. 『エクストリームプログラミング』4.3

できるだけ **多く** のフィードバックを生み出す
--------------------------------------------------

* かつ、できるだけ **早く**
* プラクティス（*習慣*）：小さなリリース

.. 参考 ベイビーステップ『エクストリームプログラミング』5.13

**小さい単位** でフィードバックを得る
--------------------------------------------------

* 小さい単位であれば、1回あたりは早く、繰り返すことで多く、フィードバックを得られる！
* フィードバックから **学ぶ** （学びが多いだけゴールに早く近づける！）

余談：イメージは勾配降下法
--------------------------------------------------

* 『継続的デリバリーのソフトウェア工学』4章（IMO：この本はアジャイル開発のすばらしい本！）
* 小さく＝ ``batch_size`` ？

プラクティスは練習で身につける！
--------------------------------------------------

* 小さなリリース＝ **いつでもリリースできる** ように開発を進める
* 最初は全然うまくできませんでした（テスト駆動開発もペアプログラミングも全部）

例：ハイパーパラメタの探索
--------------------------------------------------

* 範囲を絞る➡️具体値と決めていく
* 評価指標はすでに決めてある

範囲を絞ったら、そこでリリース！
--------------------------------------------------

* 実験して範囲が絞り込まれた（``10 ** -N``）
* 評価指標から今リリースしているモデルよりよい（better）と言える
* そのハイパーパラメタでモデルを訓練してAPIリリース

リリースのタイミングを **何回も** 作った
--------------------------------------------------

* 範囲が決まった後は、評価指標の値がよりよくなる値を見つけ次第、再びリリース
* めちゃめちゃ時間をかけて探索して1回だけリリースという進め方はしませんでした

リリースのタイミングを何回も作った結果
--------------------------------------------------

* 範囲を探索してリリースした後、 **具体値の探索はしていない**
* 代わりに、より価値の高い開発へ移れた！
* 小さなリリースのメリット：一部でも価値を届けた状態で **方向転換** もできる

参考：Release Early, Release Often
--------------------------------------------------

.. figure:: https://www.jamesshore.com/images/art-of-agile/figs/release_planning__multiple_releases.gif

『アートオブアジャイルデベロップメント』原著初版公開版より

.. 図 https://www.jamesshore.com/v2/books/aoad1/release_planning

別の例：*賢い* 小さい機能
--------------------------------------------------

* 小さい機能を一から作る
* 機械学習を使うとうまく作れそう（賢さ）
* ユーザは社内

リリースのタイミングを **何回も** 作った
--------------------------------------------------

* ルールベース + システム開発 で小さい機能を作りきってリリース
* 単純なモデル + 訓練に使うコード を次に作ってルールベースを置き換えてリリース
* モデルもシステムも一度に全部作ることはしませんでした

ゼロから作る 機械学習を使った機能
--------------------------------------------------

* 一からシステム開発するのは重い
* **システムをまず作りきる**
* 機械学習を使いたい部分は最初は優先度を下げてルールベース

.. Rules of MLのheuristic

ルールベースから機械学習への切り替え
--------------------------------------------------

* 機械学習モデルのパイプラインの作成も重い
* **パイプラインを作り切る** のを優先（モデルは優先度を下げて単純にする）
* ルールベースを置き換えることで、モデルをシステムに組み込むAPIも固まる

その後、複雑なモデルを試していき、性能が向上したら置き換える
--------------------------------------------------

* 小さく何度もリリース！
* 複数回のリリースのオーバーヘッドより、リリースを繰り返したほうが早い（当社比）

小さなリリースをするための考え方のコツ
--------------------------------------------------

* 縦スライス（横スライスではなく）
* 何回もやる

横スライス（賢い小さい機能を例に）
--------------------------------------------------

* システム部分を作る
* 単純な機械学習モデルを使う部分を作る
* 部分ごとに作っていき、これらが *全部終わって初めてリリース* できる

縦スライス
--------------------------------------------------

* **限定的なもの** を作って繰り返しリリースするという考え方の転換
* 各スライスはそれ単体でリリースできる（練習あるのみ！）

  * モデルの性能を限定して、薄く全部作る（ルールベースや単純なモデル）

参考：横スライスと縦スライス
--------------------------------------------------

.. figure:: https://www.jamesshore.com/images/art-of-agile/figs/release_planning__horizontal_and_vertical_stripes.gif

.. 『アートオブアジャイルデベロップメント』8.2
.. vertical stripes (AoAD2e)

何回もやる（1周、2周、3周、...）
--------------------------------------------------

* 1周目はゼロから作るので重い。小さく絞る
* 2周目以降は1周目でできているものが使える

何回もやる
--------------------------------------------------

* 2周目以降の生産性が上がるように意志を込めて選ぶ（例ではシステムを優先した）
* "イテレーション"＝反復するので、とくに序盤は **常に次がある** （何回も繰り返した末に完成すればいい）
